// Decoder Rev5 updated on 24th Jan 2021
function Decoder(bytes, port) {
  var ports    = port;
  var v4       = toHexString(bytes);
  var v4_1     = v4.substr(10,2);
  var v4_2     = v4.substr(0,2);
  var v4_3     = v4.substr(0,1);
  var v4_4     = v4.substr(20,2);
  var v4_5     = v4.substr(34,2);
  var v4_6     = v4.substr(10,2);
  var v4_7     = v4.substr(24,2);
  var v4_8     = v4.substr(10,2);
  var v4_9     = v4.substr(20,2);
  var v4_10    = v4.substr(0,2);
  var v3       = v4.substr(8,1);
  var length   = v4.length;
  var battery; var Tamper; var Valve; var status; var Cable; var conf_p;var conf_s; var unit1; var time1;
  var unit2; var time2; var temperature; var hygrometry; var DI_0; var DI_1; var Leakage; var Fraud;
  var clas; var power; var radio; var ADR; var DR; var SF; var T_H; var temp; var box_temp; var hum;
  var box_hum; var analog; var counter; var msg; var C; var V; var C_A; var msg1; var st; var st1; var st2; var st_0; var st_1;
  var st_2; var counter_A; var analog_A;  
  // Battery operated V3 & V4 & Class A with full payload (Tem,Hum,Counter & Analog)
  if (v4_3 == "3"){
  msg          = String.fromCharCode.apply(null, bytes);
  st2          = hex2bin(v4_2);
  clas         = st2.substr(0,1);
  power        = st2.substr(1,1);
  var bat      = msg.substr(0,4);
  battery      = Math.round((bat-2000)/16);
  st_0         = v4.substr(8,2);
  st_1         = st_0.substr(0,1)-3; 
  st_2         = st_0.substr(1,1);
  st           = st_1+st_2;
  st1          = hex2bin(st);
  status       = pad(st1,8);
  Valve        = status.substr(7,1);
  Tamper       = status.substr(6,1);
  Cable        = status.substr(5,1);
  DI_0         = status.substr(4,1);
  DI_1         = status.substr(3,1);
  Leakage      = status.substr(2,1);
  Fraud        = status.substr(1,1);
  // condition for ACK payload
  if (v4_1 == "40"){
  msg1         = hex2a(v4.substr(10,100));
  conf_p       = parseInt(msg1.substr(1,2), 16);
  conf_s       = msg1.substr(3,2);
  unit1        = msg1.substr(3,2);
  time1        = parseInt(msg1.substr(5,2), 16);
  unit2        = msg1.substr(7,2);
  time2        = parseInt(msg1.substr(9,2), 16);
  radio        = pad(hex2bin(msg1.substr(3,2)),8);
  ADR          = parseInt(radio.substr(0,1),2);
  DR           = parseInt(radio.substr(1,3),2);
  SF           = parseInt(radio.substr(4,4),2);
  counter_A    = parseInt(msg1.substr(3,6), 16);
  analog_A     = parseInt(msg1.substr(3,4), 16);
}
  //condition for payload with temp, hum, counter & analog
  if (v4_1 == "23"){
  T_H          = v4.substr(12,8);
  temp         = T_H.substr(0,4);
  box_temp     = parseInt((temp), 16);
  temperature  = (((box_temp/65536)*165)-40);
  hum          = T_H.substr(4,8);
  box_hum      = parseInt((hum), 16);
  hygrometry   = ((box_hum/65536)*100);
  C_A          = v4.substr(20,50);
  msg2         = hex2a(C_A);
  C            = msg2.search("C");
  counter      = parseInt(msg2.substr(C+1,6),16);
  V            = msg2.search("V");
  analog       = parseInt(msg2.substr(V+1,4),16);
  }
  else{
  C_A          = v4.substr(10,50);
  msg1         = hex2a(C_A);
  C            = msg1.search("C");
  counter      = parseInt(msg1.substr(C+1,6),16);
  V            = msg1.search("V");
  analog       = parseInt(msg1.substr(V+1,4),16);
  }}
  // Externally power V4 & Class A with full payload (Tem,Hum,Counter & Analog)
  if (v4_3 == "7" || v4_3 == "F" || v4_3 == "f"){
  msg          = String.fromCharCode.apply(1, bytes);
  st2          = hex2bin(v4_2);
  clas         = st2.substr(0,1);
  power        = st2.substr(1,1);
  st_0         = v4.substr(8,2);
  st_1         = st_0.substr(0,1)-3; 
  st_2         = st_0.substr(1,1);
  st           = st_1+st_2;
  st1          = hex2bin(st);
  status       = pad(st1,8);
  Valve        = status.substr(7,1);
  Tamper       = status.substr(6,1);
  Cable        = status.substr(5,1);
  DI_0         = status.substr(4,1);
  DI_1         = status.substr(3,1);
  Leakage      = status.substr(2,1);
  Fraud        = status.substr(1,1);
  // condition for ACK payload
  if (v4_1 == "40"){
  msg1         = hex2a(v4.substr(10,100));
  conf_p       = parseInt(msg1.substr(1,2), 16);
  conf_s       = msg1.substr(3,2);
  unit1        = msg1.substr(3,2);
  time1        = parseInt(msg1.substr(5,2),16);
  unit2        = msg1.substr(7,2);
  time2        = parseInt(msg1.substr(9,2),16);
  radio        = pad(hex2bin(msg1.substr(3,2)),8);
  ADR          = parseInt(radio.substr(0,1),2);
  DR           = parseInt(radio.substr(1,3),2);
  SF           = parseInt(radio.substr(4,4),2);
  counter_A    = parseInt(msg1.substr(3,6), 16);
  analog_A     = parseInt(msg1.substr(3,4), 16);
  }
  //condition for payload with temp, hum, counter & analog value
  if (v4_1 == "23"){
  T_H          = v4.substr(12,8);
  temp         = T_H.substr(0,4);
  box_temp     = parseInt((temp), 16);
  temperature  = (((box_temp/65536)*165)-40);
  hum          = T_H.substr(4,8);
  box_hum      = parseInt((hum), 16);
  hygrometry   = ((box_hum/65536)*100);
  C_A          = v4.substr(20,50);
  msg1         = hex2a(C_A);
  C            = msg1.search("C");
  counter      = parseInt(msg1.substr(C+1,6),16);
  V            = msg1.search("V");
  analog       = parseInt(msg1.substr(V+1,4),16);
  }
  else{
  C_A          = v4.substr(10,50);
  msg1         = hex2a(C_A);
  C            = msg1.search("C");
  counter      = parseInt(msg1.substr(C+1,6),16);
  V            = msg1.search("V");
  analog       = parseInt(msg1.substr(V+1,4),16);
  }}
  // Battery operated V4 & Class variation with full payload (Tem,Hum,Counter & Analog)
  if (v4_3 == "B" || v4_3 == "b"){
  msg          = String.fromCharCode.apply(1, bytes);
  st2          = hex2bin(v4_2);
  clas         = st2.substr(0,1);
  power        = st2.substr(1,1);
  var b        = v4.substr(1,1);
  var b1       = msg.substr(2,3);
  var bat1     = b.concat(b1);
  battery      = Math.round((bat1-2000)/16);
  st_0         = v4.substr(8,2);
  st_1         = st_0.substr(0,1)-3; 
  st_2         = st_0.substr(1,1);
  st           = st_1+st_2;
  st1          = hex2bin(st);
  status       = pad(st1,8);
  Valve        = status.substr(7,1);
  Tamper       = status.substr(6,1);
  Cable        = status.substr(5,1);
  DI_0         = status.substr(4,1);
  DI_1         = status.substr(3,1);
  Leakage      = status.substr(2,1);
  Fraud        = status.substr(1,1);
  // condition for ACK payload
  if (v4_1 == "40"){
  msg1         = hex2a(v4.substr(10,100));
  conf_p       = parseInt(msg1.substr(1,2), 16);
  conf_s       = msg1.substr(3,2);
  unit1        = msg1.substr(3,2);
  time1        = parseInt(msg1.substr(5,2),16);
  unit2        = msg1.substr(7,2);
  time2        = parseInt(msg1.substr(9,2),16);
  radio        = pad(hex2bin(msg1.substr(3,2)),8);
  ADR          = parseInt(radio.substr(0,1),2);
  DR           = parseInt(radio.substr(1,3),2);
  SF           = parseInt(radio.substr(4,4),2);
  counter_A    = parseInt(msg1.substr(3,6), 16);
  analog_A     = parseInt(msg1.substr(3,4), 16);
  }
  //condition for payload with temp, hum, counter & analog value
  if (v4_1 == "23"){
  T_H          = v4.substr(12,8);
  temp         = T_H.substr(0,4);
  box_temp     = parseInt((temp), 16);
  temperature  = (((box_temp/65536)*165)-40);
  hum          = T_H.substr(4,8);
  box_hum      = parseInt((hum), 16);
  hygrometry   = ((box_hum/65536)*100);
  C_A          = v4.substr(20,50);
  msg1         = hex2a(C_A);
  C            = msg1.search("C");
  counter      = parseInt(msg1.substr(C+1,6),16);
  V            = msg1.search("V");
  analog       = parseInt(msg1.substr(V+1,4),16);
  }
  else{
  C_A          = v4.substr(10,50);
  msg1         = hex2a(C_A);
  C            = msg1.search("C");
  counter      = parseInt(msg1.substr(C+1,6),16);
  V            = msg1.search("V");
  analog       = parseInt(msg1.substr(V+1,4),16);
  }}
  
  // Counter and Analog Ack frame
  if (v4_10 == "40"){
  msg1         = hex2a(v4.substr(0,100));
  conf_p       = parseInt(msg1.substr(1,2), 16);
  counter_A    = parseInt(msg1.substr(3,6), 16);
  analog_A     = parseInt(msg1.substr(3,4), 16);
  }
  
  function pad(num, len) { 
    return ("00000000" + num).substr(-len);
    }
  function roundToTwo(num) {    
    return +(Math.round(num + "e+2")  + "e-2");
  }
  function dec_to_bho (n, base) {
     if (n < 0) {
      n = 0xFFFFFFFF + n + 1;
     } 
switch (base)  
{  
case 'B':  
return parseInt(n, 10).toString(2);
break;  
case 'H':  
return parseInt(n, 10).toString(16);
break;  
case 'O':  
return parseInt(n, 10).toString(8);
break;  
default:  
return("Wrong input.........");  
}}
function ascii_to_hexa(str)
  {
	var arr1 = [];
	for (var n = 0, l = str.length; n < l; n ++) 
     {
		var hex = Number(str.charCodeAt(n)).toString(16);
		arr1.push(hex);
	 }
	return arr1.join('');
   }
function toHexString(bytes) {
    return bytes.map(function(byte) {
        return ("00" + (byte & 0xFF).toString(16)).slice(-2);
      }).join('');
}
function hex2bin(hex){
    return ("00000000" + (parseInt(hex, 16)).toString(2)).substr(-8);
}
function hex2a(hexx) {
    var hex = hexx.toString();//force conversion
    var str = '';
    for (var i = 0; (i < hex.length && hex.substr(i, 2) !== '00'); i += 2)
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return str;
}

if (v4_1==="40"){
 // Class type ack
  if(conf_p===9){
    return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      Class_Port   : conf_p || 0,
      Class_status : conf_s || 0,
  };}
 // Radio config ack
  if (conf_p===10){
  return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      ADR     : ADR,
      DR      : DR,
      SF      : SF,
      Radio_conf_Port : conf_p || 0,
      Radio_conf_ack  : conf_s || 0,
  };}
 //Uplink freq ack
  if (conf_p===11){
  return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      Unit1   : unit1 == "80"? 1:0,
      Time1   : time1,
      Unit2   : unit2 == "80"? 1:0,
      Time2   : time2,
      Uplink_conf_Port : conf_p || 0,
  };}
  // Time sync ack
  if(conf_p===12 || conf_p===13){
    return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      RTC_Port   : conf_p || 0,
      RTC_status : conf_s || 0,
  };}
// Schedulers ack
if (conf_p===14 || conf_p===15 || conf_p===16 || conf_p===17 || conf_p===18 || conf_p===19 || conf_p===20){
  return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      Schl_Port   : conf_p || 0,
      Schl_status : conf_s || 0,
  };}
  // Schedulers status ack
  if (conf_p===21){
  return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      Schl_status_Port : conf_p || 0,
      Schl_status_ack  : conf_s || 0,
  };}
// Magnet status ack
  if(conf_p===22){
    return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      magnet_Port   : conf_p || 0,
      magnet_status : conf_s || 0,
  };}
  // Counter value retrieval and counter value setting ack
  if(conf_p===23 || conf_p===24){
    return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      counter_Port   : conf_p || 0,
      counter_value  : counter_A|| 0,
  };}
  // Analog value retrieval
  if(conf_p===25){
    return {
      Port    : ports,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "false",
      analog_Port   : conf_p || 0,
      analog_value  : analog_A/1000 || 0,
  };}}
  // Ack for counter and analog
  if (v4_10 === "40"){
  // Counter value retrieval and counter value setting ack
  if(conf_p===23 || conf_p===24){
    return {
      Port    : ports,
      Process : "false",
      counter_Port   : conf_p || 0,
      counter_value  : counter_A|| 0,
  };}
  // Analog value retrieval
  if(conf_p===25){
    return {
      Port    : ports,
      Process : "false",
      analog_Port   : conf_p || 0,
      analog_value  : analog_A/1000 || 0,
  };}}
   // Periodic uplink with temp, hum
  if(v4_1==="23" && v4_4!="43" && v4_5!="56" && v4_6!="43" && v4_7!="56" && v4_8!="56" && v4_9!="56"){
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
      Temperature  : roundToTwo(temperature),
      Hygrometry   : roundToTwo(hygrometry),
  };}
  // Periodic uplink with temp, hum, counter & analog
  if(v4_1==="23" && v4_4==="43" && v4_5==="56" && v4_6!="43" && v4_7!="56" && v4_8!="56" && v4_9!="56"){
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
      Counter : counter,
      Analog_value : analog/1000,
      Temperature  : roundToTwo(temperature),
      Hygrometry   : roundToTwo(hygrometry),
  };}
  // Periodic uplink with temp, hum & counter
  if(v4_1==="23" && v4_4==="43" && v4_5!="56" && v4_6!="43" && v4_7!="56" && v4_8!="56" && v4_9!="56"){
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
      Counter : counter,
      Temperature  : roundToTwo(temperature),
      Hygrometry   : roundToTwo(hygrometry),
  };}
   // Periodic uplink with temp, hum & analog
  if(v4_1==="23" && v4_9==="56" && v4_4!="43" && v4_5!="56" && v4_6!="43" && v4_7!="56" && v4_8!="56"){
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
      Analog_value : analog/1000,
      Temperature  : roundToTwo(temperature),
      Hygrometry   : roundToTwo(hygrometry),
  };}
  // Periodic uplink with counter & analog
  if(v4_6==="43" && v4_7==="56" && v4_1!="23" && v4_4!="43" && v4_5!="56" && v4_8!="56" && v4_9!="56"){
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
      Counter : counter,
      Analog_value : analog/1000,
  };}
  // Periodic uplink with counter
  if(v4_6==="43" && v4_7!="56" && v4_1!="23" && v4_4!="43" && v4_5!="56" && v4_8!="56" && v4_9!="56"){
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
      Counter : counter,
  };}
  // Periodic uplink with analog
  if(v4_8==="56" && v4_9==="56" && v4_1!="23" && v4_4!="43" && v4_5!="56" && v4_6!="43" && v4_7!="56"){
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
      Analog_value : analog/1000,
     };}
  // periodic uplink without temp, hyg, counter & analog
  else {
     return {
      Port    : ports,
      Status  : status,
      Battery : battery,
      Valve   : Valve,
      Tamper  : Tamper,
      Cable   : Cable,
      DI_0    : DI_0,
      DI_1    : DI_1,
      Leakage : Leakage,
      Fraud   : Fraud,
      Class   : clas,
      Power   : power,
      Process : "true",
  };}}
  
