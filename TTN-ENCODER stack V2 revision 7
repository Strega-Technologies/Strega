// Encoder Rev6 updated on March 19, 2121
function Encoder(object, port) {
 function pad0(num, len) { 
 return ("30" + num).substr(-len);}
 function pad(num, len) {
 return ("00" + num).substr(-len);}
 function pad1(num, len) {
 return ("000" + num).substr(-len);}
 function pad2(num, len) {
 return ("0000" + num).substr(-len);}
 function pad3(num, len) {
 return ("000000000000000000000000" + num).substr(-len);}
 function dec_to_bho (n, base) {
 if (n < 0) {
 n = 0xFFFFFFFF + n + 1;}
switch (base){
case 'B':
return parseInt(n, 10).toString(2);
break;
case 'H':
return parseInt(n, 10).toString(16);
break;
case 'O':
return parseInt(n, 10).toString(8);
break;
default:
return("Wrong input.........");}}
 var bytes = [];
 var ne =[];
 var d1 = new Date();
 var targetTime = new Date(d1);
 // the following line describe the exact time at your location that maybe different from the time of the LNS. Set the number of hours (+/-) according to your time zone compared to GMT
 var timeZoneFromDB = +4.00; //time zone value from database
 //convert the offset to milliseconds, add to targetTime, and make a new Date
 var tzDifference = timeZoneFromDB * 60 + targetTime.getTimezoneOffset();
 var offsetTime = new Date(targetTime.getTime() + tzDifference * 60 * 1000);
 var d = offsetTime;
 var port = port;
 var Schl_on = 10;
 var Schl_off = 00;
 var Schl_m = 0;
// open and close command
 if (port === 1) {
 bytes[0] = object.payload;
 bytes[1] = 48;
 ne[0]    = bytes[1]+bytes[0];
 return ne;
 }
// Changing the class
 if (port === 9){
  bytes[0] = object.payload;
  return bytes;
 }
// Radio setting
 if (port === 10){
  var ADR   = dec_to_bho(object.ADR,'B');
  var DR    = pad1(dec_to_bho(object.DR,'B'),3);
  var SF    = pad2(dec_to_bho(object.SF,'B'),4);
  var radio = parseInt((ADR+DR+SF),2);
  bytes[0]  = radio;
  return bytes;
 }
// UL frequency time
 if (port === 11){
 if (object.unit1===1){
 bytes[0] = 128;}
 else{
 bytes[0] = 0;}
 bytes[1] = object.time1;
 if (object.unit2===1){
 bytes[2] = 128;}
 else{
 bytes[2] = 0;}
 bytes[3] = object.time2;
 return bytes;
 }
//Time Synchronization 
 if (port === 12){
  var hours = d.getHours();
  var h     = pad(hours,2);
  bytes[0]  = parseInt(h.substr(0,1));
  bytes[1]  = parseInt(h.substr(1,1));
  var mins  = d.getMinutes();
  var m     = pad(mins,2);
  bytes[2]  = parseInt(m.substr(0,1));
  bytes[3]  = parseInt(m.substr(1,1));
  var sec   = d.getSeconds();
  var s     = pad(sec,2);
  bytes[4]  = parseInt(s.substr(0,1));
  bytes[5]  = parseInt(s.substr(1,1));
  var day   = d.getDay();
  var d1    = pad(day,2);
  bytes[6]  = parseInt(d1.substr(0,1));
  bytes[7]  = parseInt(d1.substr(1,1));
  var date  = d.getDate();
  var d2    = pad(date,2);
  bytes[8]  = parseInt(d2.substr(0,1));
  bytes[9]  = parseInt(d2.substr(1,1));
  var month = d.getMonth()+1;
  var m1    = pad(month,2);
  bytes[10] = parseInt(m1.substr(0,1));
  bytes[11] = parseInt(m1.substr(1,1));
  var year  = d.getFullYear().toString().substr(2, 2);
  var y     = pad(year,2);
  bytes[12] = parseInt(y.substr(0,1));
  bytes[13] = parseInt(y.substr(1,1));
  return bytes;
 }
// Time Synchronization Request
 if (port === 13){
  bytes[0] = object.Sync_RTC;
 return bytes;
 }
// Schedulers setting
 if (port===14 || port===15 || port===16 || port===17 || port===18 || port===19 || port===20) {
 bytes[0] = 255;
 if (object.schl1h_on==="None" || object.schl1h_on===255){
   bytes[1] = 255;}
   else{
 var a = parseInt(object.schl1h_on);
 var b = pad(a,2);
 var c = b.substr(0,1);
 var d = b.substr(1,1);
 var e = pad(dec_to_bho (c,'B'),2);
 var f = pad2(dec_to_bho (d,'B'),4);
 var g = parseInt((Schl_on+e+f),2);
 bytes[1] = g;}
 if (object.schl1m_on==="None" || object.schl1m_on===255){
   bytes[2] = 255;}
   else{
 var a1 = parseInt(object.schl1m_on);
 var b1 = pad(a1,2);
 var c1 = b1.substr(0,1);
 var d1 = b1.substr(1,1);
 var e1 = pad1(dec_to_bho (c1,'B'),3);
 var f1 = pad2(dec_to_bho (d1,'B'),4);
 var g1 = parseInt((Schl_m+e1+f1),2);
 bytes[2] = g1;}
 bytes[3] = 255;
 if (object.schl1h_off==="None" || object.schl1h_off===255){
   bytes[4] = 255;}
   else{
 var a2 = parseInt(object.schl1h_off);
 var b2 = pad(a2,2);
 var c2 = b2.substr(0,1);
 var d2 = b2.substr(1,1);
 var e2 = pad(dec_to_bho (c2,'B'),2);
 var f2 = pad2(dec_to_bho (d2,'B'),4);
 var g2 = parseInt((Schl_off+e2+f2),2);
 bytes[4] = g2;}
 if (object.schl1m_off==="None" || object.schl1m_off===255){
   bytes[5] = 255;}
   else{
 var a3 = parseInt(object.schl1m_off);
 var b3 = pad(a3,2);
 var c3 = b3.substr(0,1);
 var d3 = b3.substr(1,1);
 var e3 = pad1(dec_to_bho (c3,'B'),3);
 var f3 = pad2(dec_to_bho (d3,'B'),4);
 var g3 = parseInt((Schl_m+e3+f3),2);
 bytes[5] = g3;}
 bytes[6] = 255;
 if (object.schl2h_on==="None" || object.schl2h_on===255){
   bytes[7] = 255;}
   else{
 var a4 = parseInt(object.schl2h_on);
 var b4 = pad(a4,2);
 var c4 = b4.substr(0,1);
 var d4 = b4.substr(1,1);
 var e4 = pad(dec_to_bho (c4,'B'),2);
 var f4 = pad2(dec_to_bho (d4,'B'),4);
 var g4 = parseInt((Schl_on+e4+f4),2);
 bytes[7] = g4;}
 if (object.schl2m_on==="None" || object.schl2m_on===255){
   bytes[8] = 255;}
   else{
 var a5 = parseInt(object.schl2m_on);
 var b5 = pad(a5,2);
 var c5 = b5.substr(0,1);
 var d5 = b5.substr(1,1);
 var e5 = pad1(dec_to_bho (c5,'B'),3);
 var f5 = pad2(dec_to_bho (d5,'B'),4);
 var g5 = parseInt((Schl_m+e5+f5),2);
 bytes[8] = g5;}
 bytes[9] = 255;
 if (object.schl2h_off==="None" || object.schl2h_off===255){
   bytes[10] = 255;}
   else{
 var a6 = parseInt(object.schl2h_off);
 var b6 = pad(a6,2);
 var c6 = b6.substr(0,1);
 var d6 = b6.substr(1,1);
 var e6 = pad(dec_to_bho (c6,'B'),2);
 var f6 = pad2(dec_to_bho (d6,'B'),4);
 var g6 = parseInt((Schl_off+e6+f6),2);
 bytes[10] = g6;}
 if (object.schl2m_off==="None" || object.schl2m_off===255){
   bytes[11] = 255;}
   else{
 var a7 = parseInt(object.schl2m_off);
 var b7 = pad(a7,2);
 var c7 = b7.substr(0,1);
 var d7 = b7.substr(1,1);
 var e7 = pad1(dec_to_bho (c7,'B'),3);
 var f7 = pad2(dec_to_bho (d7,'B'),4);
 var g7 = parseInt((Schl_m+e7+f7),2);
 bytes[11] = g7;}
 bytes[12] = 255;
 if (object.schl3h_on==="None" || object.schl3h_on===255){
   bytes[13] = 255;}
   else{
 var a8 = parseInt(object.schl3h_on);
 var b8 = pad(a8,2);
 var c8 = b8.substr(0,1);
 var d8 = b8.substr(1,1);
 var e8 = pad(dec_to_bho (c8,'B'),2);
 var f8 = pad2(dec_to_bho (d8,'B'),4);
 var g8 = parseInt((Schl_on+e8+f8),2);
 bytes[13] = g8;}
 if (object.schl3m_on==="None" || object.schl3m_on===255){
   bytes[14] = 255;}
   else{
 var a9 = parseInt(object.schl3m_on);
 var b9 = pad(a9,2);
 var c9 = b9.substr(0,1);
 var d9 = b9.substr(1,1);
 var e9 = pad1(dec_to_bho (c9,'B'),3);
 var f9 = pad2(dec_to_bho (d9,'B'),4);
 var g9 = parseInt((Schl_m+e9+f9),2);
 bytes[14] = g9;}
 bytes[15] = 255;
 if (object.schl3h_off==="None" || object.schl3h_off===255){
   bytes[16] = 255;}
   else{
 var a10 = parseInt(object.schl3h_off);
 var b10 = pad(a10,2);
 var c10 = b10.substr(0,1);
 var d10 = b10.substr(1,1);
 var e10 = pad(dec_to_bho (c10,'B'),2);
 var f10 = pad2(dec_to_bho (d10,'B'),4);
 var g10 = parseInt((Schl_off+e10+f10),2);
 bytes[16] = g10;}
 if (object.schl3m_off==="None" || object.schl3m_off===255){
   bytes[17] = 255;}
   else{
 var a11 = parseInt(object.schl3m_off);
 var b11 = pad(a11,2);
 var c11 = b11.substr(0,1);
 var d11 = b11.substr(1,1);
 var e11 = pad1(dec_to_bho (c11,'B'),3);
 var f11 = pad2(dec_to_bho (d11,'B'),4);
 var g11 = parseInt((Schl_m+e11+f11),2);
 bytes[17] = g11;}
 bytes[18] = 255;
 if (object.schl4h_on==="None" || object.schl4h_on===255){
   bytes[19] = 255;}
   else{
 var a12 = parseInt(object.schl4h_on);
 var b12 = pad(a12,2);
 var c12 = b12.substr(0,1);
 var d12 = b12.substr(1,1);
 var e12 = pad(dec_to_bho (c12,'B'),2);
 var f12 = pad2(dec_to_bho (d12,'B'),4);
 var g12 = parseInt((Schl_on+e12+f12),2);
 bytes[19] = g12;}
 if (object.schl4m_on==="None" || object.schl4m_on===255){
   bytes[20] = 255;}
   else{
 var a13 = parseInt(object.schl4m_on);
 var b13 = pad(a13,2);
 var c13 = b13.substr(0,1);
 var d13 = b13.substr(1,1);
 var e13 = pad1(dec_to_bho (c13,'B'),3);
 var f13 = pad2(dec_to_bho (d13,'B'),4);
 var g13 = parseInt((Schl_m+e13+f13),2);
 bytes[20] = g13;}
 bytes[21] = 255;
 if (object.schl4h_off==="None" || object.schl4h_off===255){
   bytes[22] = 255;}
   else{
 var a14 = parseInt(object.schl4h_off);
 var b14 = pad(a14,2);
 var c14 = b14.substr(0,1);
 var d14 = b14.substr(1,1);
 var e14 = pad(dec_to_bho (c14,'B'),2);
 var f14 = pad2(dec_to_bho (d14,'B'),4);
 var g14 = parseInt((Schl_off+e14+f14),2);
 bytes[22] = g14;}
 if (object.schl4m_off==="None" || object.schl4m_off===255){
   bytes[23] = 255;}
   else{
 var a15 = parseInt(object.schl4m_off);
 var b15 = pad(a15,2);
 var c15 = b15.substr(0,1);
 var d15 = b15.substr(1,1);
 var e15 = pad1(dec_to_bho (c15,'B'),3);
 var f15 = pad2(dec_to_bho (d15,'B'),4);
 var g15 = parseInt((Schl_m+e15+f15),2);
 bytes[23] = g15;}
return bytes;
}
// Schedulers status setting
 if (port === 21){
  bytes[0] = object.Schl_status;
  bytes[1] = 48;
  ne[0]    = bytes[1]+bytes[0];
 return ne;
 } 
// Magnetic control
 if (port === 22){
  bytes[0] = object.payload;
  bytes[1] = 48;
  ne[0]    = bytes[1]+bytes[0];
 return ne;
 }
// Setting your Counter value
 if (port === 23){
  var counter = pad3(dec_to_bho (object.payload,'B'),24);
  var byte1   = counter.substr(0,8);
  var byte2   = counter.substr(8,8);
  var byte3   = counter.substr(16,8);
  bytes[0]    = parseInt(byte1,2);
  bytes[1]    = parseInt(byte2,2);
  bytes[2]    = parseInt(byte3,2);
 return bytes;
 }
// Counter value retrieval
 if (port === 24){
  bytes[0] = object.payload;
  bytes[1] = 48;
  ne[0]    = bytes[1]+bytes[0];
 return ne;
 }
// Analog value retrieval
 if (port === 25){
  bytes[0] = object.payload;
  bytes[1] = 48;
  ne[0]    = bytes[1]+bytes[0];
 return ne;
 }}
